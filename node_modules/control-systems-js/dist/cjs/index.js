"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultFrequencyRange = exports.expressionToString = exports.impulse = exports.step = exports.convolute = exports.inverseLaplace = exports.isStable = exports.nyquist = exports.bode = exports.findRoots = exports.calculateTransferFunctionValue = exports.transferFunction = exports.complex = void 0;
const bode_1 = require("./lib/bode/bode");
const expressionToString_1 = require("./lib/helpers/expressionToString");
Object.defineProperty(exports, "expressionToString", { enumerable: true, get: function () { return expressionToString_1.expressionToString; } });
const impulse_1 = require("./lib/impulse/impulse");
const calculateTransferFunction_1 = require("./lib/math/calculateTransferFunction/implementations/calculateTransferFunction");
const complex_1 = require("./lib/math/complex");
Object.defineProperty(exports, "complex", { enumerable: true, get: function () { return complex_1.complex; } });
const convolution_1 = require("./lib/math/convolution/convolution");
const frequencyRange_1 = require("./lib/math/frequencyRange/frequencyRange");
const gaverStehfest_1 = require("./lib/math/inverseLaplace/implementations/gaverStehfest");
const PolynomialOperations_1 = require("./lib/math/polynomialOperations/implementations/PolynomialOperations");
const durandKerner_1 = require("./lib/math/rootFinding/implementations/durandKerner");
const routhHurwitz_1 = require("./lib/math/stability/implementations/routhHurwitz");
const nyquist_1 = require("./lib/nyquist/nyquist");
const rootLocus_1 = require("./lib/rootLocus/rootLocus");
const step_1 = require("./lib/step/step");
const transferFunction_1 = require("./lib/transferFunction/transferFunction");
const _calculateTransferFunction = new calculateTransferFunction_1.CalculateTransferFunction();
const _rootFinder = new durandKerner_1.DurandKerner();
const _polynomialOperations = new PolynomialOperations_1.PolynomialOperations();
const _bode = new bode_1.Bode(_calculateTransferFunction);
const _nyquist = new nyquist_1.Nyquist(_calculateTransferFunction);
const _rootLocus = new rootLocus_1.RootLocus(_polynomialOperations, _rootFinder);
const _stability = new routhHurwitz_1.RouthHurwitzStability();
const _inverseLaplace = new gaverStehfest_1.GaverStehfest();
const _convolution = new convolution_1.Convolution(_polynomialOperations);
const _step = new step_1.Step(_calculateTransferFunction, _inverseLaplace, _convolution);
const _impulse = new impulse_1.Impulse(_calculateTransferFunction, _inverseLaplace, _convolution);
const _frequencyRange = new frequencyRange_1.FrequencyRange();
const transferFunction = (transferFunctionInput) => {
    return new transferFunction_1.TransferFunction(transferFunctionInput, 0, _rootFinder, _rootLocus, _bode, _nyquist, _stability, _step, _impulse, _frequencyRange);
};
exports.transferFunction = transferFunction;
const calculateTransferFunctionValue = _calculateTransferFunction.calculateValue.bind(_calculateTransferFunction);
exports.calculateTransferFunctionValue = calculateTransferFunctionValue;
const findRoots = _rootLocus.findRootLocus.bind(_rootLocus);
exports.findRoots = findRoots;
const bode = _bode.calculatePoints.bind(_bode);
exports.bode = bode;
const nyquist = _nyquist.calculatePoints.bind(_nyquist);
exports.nyquist = nyquist;
const isStable = _stability.isStable.bind(_stability);
exports.isStable = isStable;
const inverseLaplace = _inverseLaplace.execute.bind(_inverseLaplace);
exports.inverseLaplace = inverseLaplace;
const convolute = _convolution.execute.bind(_convolution);
exports.convolute = convolute;
const step = _step.calculatePoints.bind(_step);
exports.step = step;
const impulse = _impulse.calculatePoints.bind(_impulse);
exports.impulse = impulse;
const getDefaultFrequencyRange = _frequencyRange.getDefault.bind(_frequencyRange);
exports.getDefaultFrequencyRange = getDefaultFrequencyRange;
//# sourceMappingURL=../../src/index.js.map