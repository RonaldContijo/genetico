import { BodeOutput, IBode } from './lib/bode/bode.entities';
import { expressionToString } from './lib/helpers/expressionToString';
import { IImpulse } from './lib/impulse/impulse.entities';
import { ICalculateTransferFunction } from './lib/math/calculateTransferFunction/calculateTransferFunction.entities';
import { Complex, complex } from './lib/math/complex';
import { IConvolution } from './lib/math/convolution/convolution.entities';
import { IInverseLaplace } from './lib/math/inverseLaplace/inverseLaplace.entities';
import { IPolynomialOperations } from './lib/math/polynomialOperations/PolynomialOperations.entities';
import { IRootFinding } from './lib/math/rootFinding/rootFinding';
import { IStability } from './lib/math/stability/stability.entities';
import { INyquist } from './lib/nyquist/nyquist.entities';
import { NyquistOutput } from './lib/nyquist/nyquist.entities';
import { IRootLocus } from './lib/rootLocus/rootLocus.entities';
import { Point } from './lib/shared/charts/charts.entities';
import { IStep } from './lib/step/step.entities';
import { TransferFunction } from './lib/transferFunction/transferFunction';
import { BodeData, ITransferFunction, NyquistData, RootLocusData, TransferFunctionExpression, TransferFunctionInput } from './lib/transferFunction/transferFunction.entities';
declare const transferFunction: (transferFunctionInput: TransferFunctionInput) => TransferFunction;
declare const calculateTransferFunctionValue: (transferFunction: TransferFunctionExpression, s: Complex) => Complex;
declare const findRoots: (tf: TransferFunctionExpression, gains: number[]) => Complex[][];
declare const bode: (transferFunction: TransferFunctionExpression, frequencyRange: number[]) => BodeOutput;
declare const nyquist: (transferFunction: TransferFunctionExpression, frequencyRange: number[]) => NyquistOutput;
declare const isStable: (coefficients: number[]) => boolean;
declare const inverseLaplace: (fn: (s: Complex) => Complex, time: number) => number;
declare const convolute: (tf1: TransferFunctionExpression, tf2: TransferFunctionExpression) => TransferFunctionExpression;
declare const step: (tf: TransferFunctionExpression, timeRange: number[]) => Point<number>[];
declare const impulse: (tf: TransferFunctionExpression, timeRange: number[]) => Point<number>[];
declare const getDefaultFrequencyRange: (poles: Complex[], zeros: Complex[], rangeFactor?: number | undefined, numOfSamples?: number | undefined) => number[];
export type { ITransferFunction, ICalculateTransferFunction, IRootFinding, IPolynomialOperations, IBode, INyquist, IRootLocus, IStability, IInverseLaplace, IConvolution, IStep, IImpulse, TransferFunctionInput, TransferFunctionExpression, Complex, BodeOutput, NyquistOutput, NyquistData, BodeData, Point, RootLocusData, };
export { complex, transferFunction, calculateTransferFunctionValue, findRoots, bode, nyquist, isStable, inverseLaplace, convolute, step, impulse, expressionToString, getDefaultFrequencyRange, };
