import { IBode } from '../bode/bode.entities';
import { IImpulse } from '../impulse/impulse.entities';
import { Complex } from '../math/complex';
import { IFrequencyRange } from '../math/frequencyRange/frequencyRange.entities';
import { IRootFinding } from '../math/rootFinding/rootFinding';
import { IStability } from '../math/stability/stability.entities';
import { INyquist } from '../nyquist/nyquist.entities';
import { IRootLocus } from '../rootLocus/rootLocus.entities';
import { Point } from '../shared/charts/charts.entities';
import { IStep } from '../step/step.entities';
import { BodeData, ITransferFunction, NyquistData, RootLocusData, TransferFunctionExpression, TransferFunctionInput } from './transferFunction.entities';
export declare class TransferFunction implements ITransferFunction {
    private readonly tf;
    private readonly poles;
    private readonly zeros;
    private readonly frequencyRange;
    private readonly timeRange;
    private readonly rootFinder;
    private readonly rootLocus;
    private readonly bodeCalculator;
    private readonly nyquistCalculator;
    private readonly stability;
    private readonly stepCalculator;
    private readonly impulseCalculator;
    private readonly frequencyRangeCalculator;
    constructor(transferFunctionInput: TransferFunctionInput, _timeDelay: number | undefined, rootFinder: IRootFinding, rootLocus: IRootLocus, bode: IBode, nyquist: INyquist, stability: IStability, step: IStep, impulse: IImpulse, frequencyRange: IFrequencyRange);
    private validateTransferFunctionInput;
    private calculateRoots;
    toString(): string;
    getExpression(): TransferFunctionExpression;
    pole(): Complex[];
    zero(): Complex[];
    private mapRootLocusRootsToChart;
    rlocus(k?: number[]): RootLocusData;
    bode(frequencyRange?: number[]): BodeData;
    nyquist(frequencyRange?: number[]): NyquistData;
    step(timeRange?: number[]): Point<number>[];
    impulse(timeRange?: number[]): Point<number>[];
}
