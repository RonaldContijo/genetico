"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const calculateTransferFunction_1 = require("../math/calculateTransferFunction/implementations/calculateTransferFunction");
const complex_1 = require("../math/complex");
const bode_1 = require("./bode");
(0, vitest_1.describe)('Bode Class', () => {
    let bode;
    let calculateTransferFunction;
    let calculationSpy;
    (0, vitest_1.beforeEach)(() => {
        calculateTransferFunction = new calculateTransferFunction_1.CalculateTransferFunction();
        calculationSpy = vitest_1.vi.spyOn(calculateTransferFunction, 'calculateValue');
        bode = new bode_1.Bode(calculateTransferFunction);
    });
    (0, vitest_1.it)('Should calculate correctly the magnitude data given a set of frequencies', () => {
        //  s + 2 / 2 s + 1
        // f = bodemag(e, 10)
        // f = 0.5093
        const transferFunction = {
            numerator: [(0, complex_1.complex)(1, 0), (0, complex_1.complex)(2, 0)],
            denominator: [(0, complex_1.complex)(2, 0), (0, complex_1.complex)(1, 0)],
        };
        calculationSpy.mockReturnValue((0, complex_1.complex)(0.5093, 0));
        const result = bode.calculatePoints(transferFunction, [10]);
        (0, vitest_1.expect)(result.magnitude[0]).toBeDefined();
        (0, vitest_1.expect)(result.magnitude[0].y).toBeCloseTo(-5.8611);
        (0, vitest_1.expect)(result.magnitude[0].x).toBe(10);
    });
    (0, vitest_1.it)('Should calculate correctly the phase data given a set of frequencies', () => {
        //  s + 2 / 2 s + 1
        const transferFunction = {
            numerator: [(0, complex_1.complex)(1, 0), (0, complex_1.complex)(2, 0)],
            denominator: [(0, complex_1.complex)(2, 0), (0, complex_1.complex)(1, 0)],
        };
        calculationSpy.mockReturnValue((0, complex_1.complex)(0.5093, 10));
        const result = bode.calculatePoints(transferFunction, [10]);
        (0, vitest_1.expect)(result.magnitude[0]).toBeDefined();
        (0, vitest_1.expect)(result.magnitude[0].y).toBeCloseTo(20.011);
        (0, vitest_1.expect)(result.magnitude[0].x).toBe(10);
    });
});
//# sourceMappingURL=../../../../src/lib/bode/bode.spec.js.map