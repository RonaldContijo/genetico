"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pow = void 0;
const complex_1 = require("../complex");
const one_1 = require("../constants/one");
const zero_1 = require("../constants/zero");
const isComplex_1 = require("../utils/isComplex");
const isNumber_1 = require("../utils/isNumber");
const isZero_1 = require("../utils/isZero");
const arg_1 = require("./arg");
const logHypot_1 = require("./logHypot");
const complexPow = (base, exponent) => {
    const expReal = exponent.re;
    const expIm = exponent.im;
    const { re, im } = base;
    if ((0, isZero_1.isZero)(exponent)) {
        return one_1.ONE;
    }
    // if exponent is real
    if (expIm === 0) {
        if (im === 0 && re > 0) {
            return { re: Math.pow(re, expReal), im: 0 };
        }
        else if (re === 0) {
            switch (((expReal % 4) + 4) % 4) {
                case 0:
                    return { re: Math.pow(im, expReal), im: 0 };
                case 1:
                    return { re: 0, im: Math.pow(im, expReal) };
                case 2:
                    return { re: -Math.pow(im, expReal), im: 0 };
                case 3:
                    return { re: 0, im: -Math.pow(im, expReal) };
            }
        }
    }
    if ((0, isZero_1.isZero)(base)) {
        return zero_1.ZERO;
    }
    const argument = (0, arg_1.arg)(base);
    const hypotLog = (0, logHypot_1.logHypot)(base);
    const realResult = Math.exp(expReal * hypotLog - expIm * argument);
    const imResult = expIm * hypotLog + expReal * argument;
    return {
        re: realResult * Math.cos(imResult),
        im: realResult * Math.sin(imResult),
    };
};
function pow(base, exponent) {
    if ((0, isNumber_1.isNumber)(base) && (0, isNumber_1.isNumber)(exponent)) {
        return Math.pow(base, exponent);
    }
    const complexBase = (0, isComplex_1.isComplex)(base) ? base : (0, complex_1.complex)(base, 0);
    const complexExponent = (0, isComplex_1.isComplex)(exponent) ? exponent : (0, complex_1.complex)(exponent, 0);
    return complexPow(complexBase, complexExponent);
}
exports.pow = pow;
//# sourceMappingURL=../../../../../../src/lib/math/complex/operations/pow.js.map