"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const add_1 = require("./add");
(0, vitest_1.describe)('add function', () => {
    // Complex + Complex
    (0, vitest_1.it)('Should be able to add two complex numbers', () => {
        const a = { re: 1, im: 2 };
        const b = { re: 3, im: 4 };
        const result = { re: 4, im: 6 };
        (0, vitest_1.expect)((0, add_1.add)(a, b)).toEqual(result);
    });
    // Complex + Number
    (0, vitest_1.it)('Should be able to add a complex number and a number', () => {
        const a = { re: 1, im: 2 };
        const b = 3;
        const result = { re: 4, im: 2 };
        (0, vitest_1.expect)((0, add_1.add)(a, b)).toEqual(result);
    });
    // Number + Complex
    (0, vitest_1.it)('Should be able to add a number and a complex number', () => {
        const a = 3;
        const b = { re: 1, im: 2 };
        const result = { re: 4, im: 2 };
        (0, vitest_1.expect)((0, add_1.add)(a, b)).toEqual(result);
    });
    // Number + Number
    (0, vitest_1.it)('Should be able to add two numbers', () => {
        const a = 1;
        const b = 2;
        const result = 3;
        (0, vitest_1.expect)((0, add_1.add)(a, b)).toEqual(result);
    });
    // Invalid input
    (0, vitest_1.it)('Should throw an error if given invalid input', () => {
        const a = 'a';
        const b = 'b';
        (0, vitest_1.expect)(() => (0, add_1.add)(a, b)).toThrow('Wrong type values for operation a: a, b: b');
    });
});
//# sourceMappingURL=../../../../../../src/lib/math/complex/operations/add.spec.js.map