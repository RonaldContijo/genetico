"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const complex_1 = require("../../complex");
const PolynomialOperations_1 = require("./PolynomialOperations");
let polynomialOperations;
(0, vitest_1.beforeEach)(() => {
    polynomialOperations = new PolynomialOperations_1.PolynomialOperations();
});
(0, vitest_1.describe)('Testing Polynomial Operations class', () => {
    (0, vitest_1.describe)('Testing add operation', () => {
        (0, vitest_1.it)('Should throw an error if one of the polynomial is invalid', () => {
            const validPol = (0, complex_1.toComplex)([1, 2, 3]);
            const wrongPol = null;
            (0, vitest_1.expect)(() => polynomialOperations.add(validPol, wrongPol)).toThrowError();
            (0, vitest_1.expect)(() => polynomialOperations.add(wrongPol, validPol)).toThrowError();
        });
        (0, vitest_1.it)('Should add real polynomials successfully', () => {
            /**
             *  (3x^3 + 5x^2 + 0x^1 + 2) + (x^2 + 2x + 3) = (3x^3 + 6x^2 + 2x + 5)
             */
            const pol1 = (0, complex_1.toComplex)([3, 5, 0, 2]);
            const pol2 = (0, complex_1.toComplex)([1, 2, 3]);
            const expectedResult = (0, complex_1.toComplex)([3, 6, 2, 5]);
            const resultPol = polynomialOperations.add(pol1, pol2);
            for (const [index, result] of resultPol.entries()) {
                (0, vitest_1.expect)(result).toMatchObject(expectedResult[index]);
            }
        });
        // it('Should add complex polynomials successfully', () => {
        //   const pol1 = [complex(1, 2), complex(3, 4), complex(3, -2)];
        //   const pol2 = [complex(1, 2), complex(3, 4), complex(1, 2)];
        //   const expectedResult = [complex(2, 4), complex(6, 8), complex(4, 0)];
        //   const resultPol = polynomialOperations.add(pol1, pol2);
        //   expect(resultPol).toEqual(expectedResult);
        // });
    });
    (0, vitest_1.describe)('Testing subtraction operation', () => {
        (0, vitest_1.it)('Should throw an error if one of the polynomial is invalid', () => {
            const validPol = (0, complex_1.toComplex)([1, 2, 3]);
            const wrongPol = null;
            (0, vitest_1.expect)(() => polynomialOperations.subtract(validPol, wrongPol)).toThrowError();
            (0, vitest_1.expect)(() => polynomialOperations.subtract(wrongPol, validPol)).toThrowError();
        });
        (0, vitest_1.it)('Should subtract real polynomials successfully', () => {
            /**
             *  (3x^3 + 5x^2 + 0x^1 + 2) - (x^2 + 2x + 3) = (3x^3 + 4x^2 - 2x - 1)
             */
            const pol1 = (0, complex_1.toComplex)([3, 5, 0, 2]);
            const pol2 = (0, complex_1.toComplex)([1, 2, 3]);
            const expectedResult = (0, complex_1.toComplex)([3, 4, -2, -1]);
            const resultPol = polynomialOperations.subtract(pol1, pol2);
            (0, vitest_1.expect)(resultPol).toEqual(expectedResult);
        });
        (0, vitest_1.it)('Should subtract complex polynomials successfully', () => {
            /**
             *  ((1+2j)x^2 + (3+4j)x + (3 - 2j)) - ((1+2j)x^2 + (3+4j)x + (1 + 2j)) = 2 -4j
             */
            const pol1 = [(0, complex_1.complex)(1, 2), (0, complex_1.complex)(3, 4), (0, complex_1.complex)(3, -2)];
            const pol2 = [(0, complex_1.complex)(1, 2), (0, complex_1.complex)(3, 4), (0, complex_1.complex)(1, 2)];
            const expectedResult = [(0, complex_1.complex)(0, 0), (0, complex_1.complex)(0, 0), (0, complex_1.complex)(2, -4)];
            const resultPol = polynomialOperations.subtract(pol1, pol2);
            (0, vitest_1.expect)(resultPol).toEqual(expectedResult);
        });
    });
    (0, vitest_1.describe)('Testing multiplication operation', () => {
        (0, vitest_1.it)('Should throw an error if one of the polynomial is invalid', () => {
            const validPol = (0, complex_1.toComplex)([1, 2, 3]);
            const wrongPol = null;
            (0, vitest_1.expect)(() => polynomialOperations.multiply(validPol, wrongPol)).toThrowError();
            (0, vitest_1.expect)(() => polynomialOperations.multiply(wrongPol, validPol)).toThrowError();
        });
        (0, vitest_1.it)('Should multiply real polynomials successfully', () => {
            /**
             *  (3x^3 + 5x^2 + 0x^1 + 2) - (x^2 + 2x + 3) = 6 + 4x + 17x^2 + 19x^3 + 11x^4 + 3x^5
             */
            const pol1 = (0, complex_1.toComplex)([3, 5, 0, 2]);
            const pol2 = (0, complex_1.toComplex)([1, 2, 3]);
            const expectedResult = (0, complex_1.toComplex)([3, 11, 19, 17, 4, 6]);
            const resultPol = polynomialOperations.multiply(pol1, pol2);
            (0, vitest_1.expect)(resultPol).toEqual(expectedResult);
        });
        (0, vitest_1.it)('Should multiply complex polynomials successfully', () => {
            /**
             *  ((1+2j)x^2 + (3+4j)x + (3 - 2j)) * ((1+2j)x^2 + (3+4j)x + (1 + 2j)) = (7 + 4i) + (12 + 16i) x - (3 - 32i) x^2 - (10 - 20i) x^3 - (3 - 4i) x^4
             */
            const pol1 = [(0, complex_1.complex)(1, 2), (0, complex_1.complex)(3, 4), (0, complex_1.complex)(3, -2)];
            const pol2 = [(0, complex_1.complex)(1, 2), (0, complex_1.complex)(3, 4), (0, complex_1.complex)(1, 2)];
            const expectedResult = [(0, complex_1.complex)(-3, 4), (0, complex_1.complex)(-10, 20), (0, complex_1.complex)(-3, 32), (0, complex_1.complex)(12, 16), (0, complex_1.complex)(7, 4)];
            const resultPol = polynomialOperations.multiply(pol1, pol2);
            (0, vitest_1.expect)(resultPol).toEqual(expectedResult);
        });
    });
    (0, vitest_1.describe)('Testing division operation', () => {
        vitest_1.it.skip('Should throw an error if one of the polynomial is invalid', () => {
            const validPol = (0, complex_1.toComplex)([1, 2, 3]);
            const wrongPol = null;
            (0, vitest_1.expect)(() => polynomialOperations.divide(validPol, wrongPol)).toThrowError();
            (0, vitest_1.expect)(() => polynomialOperations.divide(wrongPol, validPol)).toThrowError();
        });
        vitest_1.it.todo('Should divide real polynomials successfully');
        vitest_1.it.todo('Should  divide complex polynomials successfully');
    });
});
//# sourceMappingURL=../../../../../../src/lib/math/polynomialOperations/implementations/PolynomialOperations.spec.js.map