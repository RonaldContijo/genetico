"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalculateTransferFunction = void 0;
const complex_1 = require("../../complex");
class CalculateTransferFunction {
    evaluateExpressionValue(value, coeff, numOfCoeffs, currentIndex) {
        // (numOfCoeffs - currentIndex - 1) is used to evaluate correctly the power of the variable, since
        // the in the array of the coefficients, the first value is the highest power
        return (0, complex_1.multiply)(coeff, (0, complex_1.pow)(value, numOfCoeffs - currentIndex - 1));
    }
    calculateValue(tf, s) {
        // Evaluate the polynomials formed by the numerator and denominator coefficients at s
        const numerator = tf.numerator.reduce((acc, coeff, index) => (0, complex_1.add)(acc, this.evaluateExpressionValue(s, coeff, tf.numerator.length, index)), (0, complex_1.complex)(0, 0));
        const denominator = tf.denominator.reduce((acc, coeff, index) => (0, complex_1.add)(acc, this.evaluateExpressionValue(s, coeff, tf.denominator.length, index)), (0, complex_1.complex)(0, 0));
        return (0, complex_1.divide)(numerator, denominator);
    }
}
exports.CalculateTransferFunction = CalculateTransferFunction;
//# sourceMappingURL=../../../../../../src/lib/math/calculateTransferFunction/implementations/calculateTransferFunction.js.map