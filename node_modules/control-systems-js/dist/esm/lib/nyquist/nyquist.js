import { complex } from '../math/complex';
export class Nyquist {
    constructor(calculateTransferFunction) {
        this.calculateTransferFunction = calculateTransferFunction;
    }
    calculatePoints(tf, frequencyRange) {
        const points = [];
        const correspondingPoints = [];
        for (const f of frequencyRange) {
            // Calculate the transfer function at the given frequency
            const s = complex(0, f);
            const calculatedTf = this.calculateTransferFunction.calculateValue(tf, s);
            // Add the real and imaginary parts of the transfer function to the data array
            points.push({ x: calculatedTf === null || calculatedTf === void 0 ? void 0 : calculatedTf.re, y: calculatedTf === null || calculatedTf === void 0 ? void 0 : calculatedTf.im });
            correspondingPoints.push({ x: calculatedTf === null || calculatedTf === void 0 ? void 0 : calculatedTf.re, y: -(calculatedTf === null || calculatedTf === void 0 ? void 0 : calculatedTf.im) });
        }
        return {
            points,
            correspondingPoints,
        };
    }
}
//# sourceMappingURL=../../../../src/lib/nyquist/nyquist.js.map