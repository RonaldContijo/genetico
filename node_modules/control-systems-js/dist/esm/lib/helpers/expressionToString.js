const shouldAddNumberToExpression = (num, expressionLength, index) => {
    // Should cover last coefficient if the value is 1
    return (index === expressionLength - 1 && num.toString() === '1') || num.toString() !== '1';
};
const shouldAddVariableToExpression = (expressionLength, index) => expressionLength - index - 1 != 0;
const shouldAddPowToExpression = (expressionLength, index) => expressionLength - index - 1 != 1;
const shouldAddOperationSignalToExpression = (num, index) => index !== 0 || (index == 0 && num < 0);
// TODO: improve this code as its hard to understand currently
/**
 * Accepts a polynomial expression and return a string formatted
 * @param expr
 * @param variable string to be used as the variable
 *
 * @example
 * // return -x^2 - 2x + 3
 * expressionToString([-1, -2, 3], 'x')
 */
export const expressionToString = (expr, variable = 's') => {
    let stringExpression = '';
    expr.forEach((num, index) => {
        if (Math.abs(num.re) > 0 || Math.abs(num.im) > 0) {
            if (shouldAddOperationSignalToExpression(num.re, index)) {
                const isImaginary = Math.abs(num.im) > 0;
                const signal = isImaginary ? ' + ' : num.re > 0 ? ' + ' : ' - ';
                stringExpression += signal;
            }
            if (shouldAddNumberToExpression(num, expr.length, index)) {
                const numToAdd = (num === null || num === void 0 ? void 0 : num.im) !== 0 ? `(${num.toString()})` : `${Math.abs(num.re)}`;
                stringExpression += numToAdd;
            }
            if (shouldAddVariableToExpression(expr.length, index)) {
                stringExpression += `${variable}`;
                if (shouldAddPowToExpression(expr.length, index)) {
                    stringExpression += `^${expr.length - index - 1}`;
                }
            }
        }
    });
    return stringExpression;
};
//# sourceMappingURL=../../../../src/lib/helpers/expressionToString.js.map