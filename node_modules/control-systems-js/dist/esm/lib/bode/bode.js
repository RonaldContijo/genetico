import { add, arg, complex, pow, sqrt } from '../math/complex';
export class Bode {
    constructor(calculateTransferFunction) {
        this.calculateTransferFunction = calculateTransferFunction;
    }
    calculateAbsoluteValue(value) {
        const sumOfQuadratic = add(pow(Math.abs(value.re), 2), pow(Math.abs(value.im), 2));
        const result = sqrt(sumOfQuadratic);
        return result;
    }
    mag2db(value) {
        return 20 * Math.log10(value);
    }
    calculatePoints(tf, frequencyRange) {
        const magnitudeData = [];
        const phaseData = [];
        for (const f of frequencyRange) {
            // Calculate the transfer function at the given frequency
            const s = complex(0, f);
            const calculatedTf = this.calculateTransferFunction.calculateValue(tf, s);
            // Calculate the magnitude and phase of the transfer function
            const magnitude = this.mag2db(this.calculateAbsoluteValue(calculatedTf));
            const phase = (arg(calculatedTf) * 180) / Math.PI;
            magnitudeData.push({ x: f, y: magnitude });
            phaseData.push({ x: f, y: phase });
        }
        return {
            magnitude: magnitudeData,
            phase: phaseData,
        };
    }
}
//# sourceMappingURL=../../../../src/lib/bode/bode.js.map