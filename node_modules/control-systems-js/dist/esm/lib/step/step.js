import { complex } from '../math/complex';
export class Step {
    constructor(calculateTransferFunction, inverseLaplace, convolution) {
        this.calculateTransferFunction = calculateTransferFunction;
        this.inverseLaplace = inverseLaplace;
        this.convolution = convolution;
    }
    calculatePoints(tf, timeRange) {
        // step = 1/s
        const stepExpression = {
            numerator: [complex(1, 0)],
            denominator: [complex(1, 0), complex(0, 0)],
        };
        // step response = tf * 1/s
        const responseFunction = this.convolution.execute(tf, stepExpression);
        const points = timeRange.map((time) => {
            const timeResponse = this.inverseLaplace.execute((s) => this.calculateTransferFunction.calculateValue(responseFunction, s), time);
            return { x: time, y: timeResponse };
        });
        return points;
    }
}
//# sourceMappingURL=../../../../src/lib/step/step.js.map