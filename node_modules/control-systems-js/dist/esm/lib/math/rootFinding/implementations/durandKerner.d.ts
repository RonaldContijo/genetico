import { Complex } from '../../complex';
import { IRootFinding } from '../rootFinding';
/**
 * Implementation of a root finding algorithm.
 * Based on Dr. John B. Matthews's [Java implementation](https://sites.google.com/site/drjohnbmatthews/polyroots/source)
 */
export declare class DurandKerner implements IRootFinding {
    /**
     * Transform polynomial coefficients to comply to a monic form
     * @param coefficients
     */
    private toMonicForm;
    /**
     * Check if the arrays have converged, meaning that the delta for each value inside both arrays
     * are less than the tolerance passed
     * @param valuesA
     * @param valuesB
     * @param tolerance
     */
    private hasConverged;
    /**
     * Evaluates polynomial according to a given value.
     * It uses the [Horner's method](https://en.wikipedia.org/wiki/Horner%27s_method) for evaluation
     * @param coefficients
     * @param value
     */
    private evalPolynomial;
    /**
     * Creates an array with the initial root guesses
     * @param polynomialOrder
     * @param initialResult
     */
    private generateInitialRootGuess;
    /**
     * Calculates the roots of a polynomial
     * @param initialRoots
     * @param initialResult
     * @param maxIterations
     * @param tolerance
     */
    private calculateRoots;
    /**
     * Applies the precision to each calculated root
     * @param roots
     * @param precision
     */
    private setRootsPrecision;
    /**
     * Find all the roots from a polynomial. It applies the Durandâ€“Kerner (or Weierstrass) method.
     * The array should have the highest order coefficient first.
     * @param maxIterations
     * @param precision
     * @param tolerance
     */
    findRoots(coefficients: Complex[], maxIterations?: number, precision?: number, tolerance?: number): Complex[];
}
