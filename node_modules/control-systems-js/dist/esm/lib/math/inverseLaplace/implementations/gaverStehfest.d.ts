import { Complex } from '../../complex';
import { IInverseLaplace } from '../inverseLaplace.entities';
export declare class GaverStehfest implements IInverseLaplace {
    private readonly NUMBER_OF_COEFFICIENTS;
    private readonly SMALL_NUMBER;
    private getCoefficients1;
    /**
     * Based on the implementations of the following links
     * https://github.com/jlapeyre/InverseLaplace.jl/blob/master/src/gaverstehfest.jl
     * https://www.cs.hs-rm.de/~weber/lapinv/gavsteh/gavsteh.htm
     * https://www.mathworks.com/matlabcentral/fileexchange/9987-gaver-stehfest-algorithm-for-inverse-laplace-transform
     * https://mpmath.org/doc/current/calculus/inverselaplace.html
     *
     * And the original research from Stehfest
     *
     * @param fn Laplace function to be transformed
     * @param t Time for the function to be evaluated at
     * @param L The number of coefficients. It depends on the computer word length used (examples: L=8, 10, 12, 14, 16, etc.)
     * @returns
     */
    private gavsteh;
    /**
     * This function is an implementation of the Gaver-Stehfest method for numerical inverse Laplace transform.
     * The algorithm uses a summation of the function values evaluated at specific values,
     * multiplied by coefficients calculated using a combination of factorials and powers.
     * @param fn Laplace function to be transformed
     * @param time Time for the function to be evaluated at
     * @returns evaluated function value
     */
    execute(fn: (s: Complex) => Complex, time: number): number;
}
