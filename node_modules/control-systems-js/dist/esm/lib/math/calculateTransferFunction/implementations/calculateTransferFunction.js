import { add, complex, divide, multiply, pow } from '../../complex';
export class CalculateTransferFunction {
    evaluateExpressionValue(value, coeff, numOfCoeffs, currentIndex) {
        // (numOfCoeffs - currentIndex - 1) is used to evaluate correctly the power of the variable, since
        // the in the array of the coefficients, the first value is the highest power
        return multiply(coeff, pow(value, numOfCoeffs - currentIndex - 1));
    }
    calculateValue(tf, s) {
        // Evaluate the polynomials formed by the numerator and denominator coefficients at s
        const numerator = tf.numerator.reduce((acc, coeff, index) => add(acc, this.evaluateExpressionValue(s, coeff, tf.numerator.length, index)), complex(0, 0));
        const denominator = tf.denominator.reduce((acc, coeff, index) => add(acc, this.evaluateExpressionValue(s, coeff, tf.denominator.length, index)), complex(0, 0));
        return divide(numerator, denominator);
    }
}
//# sourceMappingURL=../../../../../../src/lib/math/calculateTransferFunction/implementations/calculateTransferFunction.js.map