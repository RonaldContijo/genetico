import { Bode } from './lib/bode/bode';
import { expressionToString } from './lib/helpers/expressionToString';
import { Impulse } from './lib/impulse/impulse';
import { CalculateTransferFunction } from './lib/math/calculateTransferFunction/implementations/calculateTransferFunction';
import { complex } from './lib/math/complex';
import { Convolution } from './lib/math/convolution/convolution';
import { FrequencyRange } from './lib/math/frequencyRange/frequencyRange';
import { GaverStehfest } from './lib/math/inverseLaplace/implementations/gaverStehfest';
import { PolynomialOperations } from './lib/math/polynomialOperations/implementations/PolynomialOperations';
import { DurandKerner } from './lib/math/rootFinding/implementations/durandKerner';
import { RouthHurwitzStability } from './lib/math/stability/implementations/routhHurwitz';
import { Nyquist } from './lib/nyquist/nyquist';
import { RootLocus } from './lib/rootLocus/rootLocus';
import { Step } from './lib/step/step';
import { TransferFunction } from './lib/transferFunction/transferFunction';
const _calculateTransferFunction = new CalculateTransferFunction();
const _rootFinder = new DurandKerner();
const _polynomialOperations = new PolynomialOperations();
const _bode = new Bode(_calculateTransferFunction);
const _nyquist = new Nyquist(_calculateTransferFunction);
const _rootLocus = new RootLocus(_polynomialOperations, _rootFinder);
const _stability = new RouthHurwitzStability();
const _inverseLaplace = new GaverStehfest();
const _convolution = new Convolution(_polynomialOperations);
const _step = new Step(_calculateTransferFunction, _inverseLaplace, _convolution);
const _impulse = new Impulse(_calculateTransferFunction, _inverseLaplace, _convolution);
const _frequencyRange = new FrequencyRange();
const transferFunction = (transferFunctionInput) => {
    return new TransferFunction(transferFunctionInput, 0, _rootFinder, _rootLocus, _bode, _nyquist, _stability, _step, _impulse, _frequencyRange);
};
const calculateTransferFunctionValue = _calculateTransferFunction.calculateValue.bind(_calculateTransferFunction);
const findRoots = _rootLocus.findRootLocus.bind(_rootLocus);
const bode = _bode.calculatePoints.bind(_bode);
const nyquist = _nyquist.calculatePoints.bind(_nyquist);
const isStable = _stability.isStable.bind(_stability);
const inverseLaplace = _inverseLaplace.execute.bind(_inverseLaplace);
const convolute = _convolution.execute.bind(_convolution);
const step = _step.calculatePoints.bind(_step);
const impulse = _impulse.calculatePoints.bind(_impulse);
const getDefaultFrequencyRange = _frequencyRange.getDefault.bind(_frequencyRange);
export { complex, transferFunction, calculateTransferFunctionValue, findRoots, bode, nyquist, isStable, inverseLaplace, convolute, step, impulse, expressionToString, getDefaultFrequencyRange, };
//# sourceMappingURL=../../src/index.js.map